/* 3 лабараторная работа вариант 7
Задание: Дана последовательность целых чисел {Aj}. Найти сумму чисел делящихся на 3 или на 7,
наименьшее из таких чисел, и номер этого числа в последовательности.
*/
#include <iostream>
int main() {
    setlocale(LC_ALL, "ru");
    const int ARRAY_SIZE = 10;
    int array[ARRAY_SIZE] = {};
    int temp{};
    for (int i = 0; i < ARRAY_SIZE; ++i) {
        std::cout << "Введите " << i << "ый элемент массива: ";
        std::cin >> temp;
        // Изменяем значение массива под индексом i, на введеное значене.
        array[i] = temp;
    }
    // Переменная, в которой будет хранится сумма удовлетворяющих чисел.
    int sum{};
    // в этой переменной будет хранится индекс наименьшего значения в массиве
    int smallest{};
    // Переменная для забора первого числа из массива
    // (Необходима для замены 0 - хранящегося по умолчанию в smallest,
    // первым удовлетворяющим значением из массива)
    bool check{ true };
    // Проходимся по все числам в массиве
    for (int i = 0; i < ARRAY_SIZE; ++i) {
        if (array[i] % 3 == 0 || array[i] % 7 == 0) {
            sum += array[i];
            if (check == true) {
                smallest = i;
                check = false;
                // после получения первого удовлетворяющего числа
                // пропускаем оставшийся код из цикла с помощью continue
                continue;
            }
            // Если число из массива меньше нынешнего хранящегося в smallest заменяем его.
            if (array[i] < array[smallest]) {
                smallest = i;
            }
        }
    }
    // Выводим все значения из массива, для удобства проверки
    for (int i = 0; i < ARRAY_SIZE; ++i) {
        std::cout << i << ": [" << array[i] << "], ";
    }
    std::cout << std::endl;
    std::cout << "Сумма значений последовательности делящихся на 3 и на 7 = " << sum << std::endl;
    std::cout << "Наименьшее значение делящееся на 3 или на 7: " << array[smallest] << ", его номер = " << smallest << std::endl;
}